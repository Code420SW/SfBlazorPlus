@page "/"

@namespace Code420.SfBlazorPlus.Pages.Orchestrator

@using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorSidebar
@using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorSidebarButton
@using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabMananger
@using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabManager.OrchestratorTabs.DummyTab

<!--

    Overview:
    The Orchestrator component is the primary application controller. It lives at the root URL
    and is, therefore, the first page loaded. It is the only URL available in the application.

    MainLayout provides the page div for the application amd establishes a grid on the page div
    consisting of three row with one column each. The page div geight is set to 100vh meaning it 
    will fill yje entire page The grid rows are defined as auto, 1fr, auto meaning the top and 
    bottom rows will be sized based on their contents and the center row will consume the balance 
    of the space.
    
    The Orchestrator component is injected into MainLayout through the @Body element.

    The Orchestrator component populates the grid rows with its header, main and footer HTML elements.
    These elements are containers for other components. The Orchestrator provides basic CSS styling for
    the HTML elements which should be used to provide basic styling (e.g., height, background and borders).
    Note that the child components should provide their own styling.


    Implementation Specifics:
    This implementation populates the header HTML elementwith one or more menu/toolbar applicable to the
    entire application.

    The footer HTML element is populated with a status bar providing messages to the user. The messaging
    can be contextual.

    The main HTML element contains the primary content consisting of a SideBarBase containing a MenuBase used 
    as the primary menuing system. The main element also contains a TabBase through which the various 
    applications SPAs are displayed


    Capabilities:
    1.  The Orchestrator passes a CascadingValue to all child components with a self-reference. This 
        reference can be used by the child to subscribe to an Orchestrator event (e.g., ActiveTabChanged).

    2.  The Orchestrator passes callback functions to child components that allow the child to notify
        the Orchestrator that an event has ocurred (user clicked a menu item).



RenderFragment renderFragment = (builder) => { builder.OpenComponent(0, counter.GetType()); builder.CloseComponent(); };
Type=@(Type.GetType(childComponents[indexCurrentChild].CType))
CType=typeof(DynamicComponent2Child1).AssemblyQualifiedName
https://jonhilton.net/blazor-dynamic-components/
https://www.telerik.com/blogs/how-to-render-blazor-components-dynamically
https://docs.devexpress.com/Blazor/401753/common-concepts/customize-and-reuse-components

-->

<CascadingValue Value=@this Name="OrchestratorRef" IsFixed=true>

    <header class="page__header">
        <div class = "page__header-1">
            <h1 style = "font-size: 1em;">This is the Orchestrator Page</h1>
        </div>
        <div class = "page__header-2">
            <div class="header2__sidebar-button">
                <OrchestratorSidebarButton  @ref=@buttonSidebarToggle OrchestratorRef=@this />
            </div>
            <div class="header2__menu">

            </div>
        </div>
    </header>

    <main class="page__main">

        <!--
            The page__main-content div is required so that OrchestratorSidebar 
            correctly animates page__main when opening/closing. If everything
            is shoved under page__main, only the first div an animated correctly.
        -->
        <div class = "page__main-content">
            <OrchestratorTabManager @ref=@tabmanager />
        </div>

    </main>

    <footer class="page__footer">
        <div class="page__footer-filler"></div>
    </footer>

    <OrchestratorSidebar @ref=sidebar OrchestratorRef=@this InitialSidebarIsOpen=@initialSidebarIsOpen />

</CascadingValue>
<style>
        
    /*
        Set styling for the header element
    */
    .page__header {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: auto auto;
        column-gap: 0px;
        row-gap: 0px;

        height: auto;
        border-bottom: 3px solid rgb(226,88,0);
    }

     /*
        Set styling for the header-1 element
    */
    .page__header-1 {
        background-color: pink;
        height: auto;
        display: block;
        padding: .5em 2em;
    }

    /*
        Set styling for the header-2 element

        The right/left padding should match the right/left padding passed
        by OrchestratorMenu to the MenuBase MenuItemPadding parament. This
        will align the OrchestratorSidebarButton with the menu icons when
        the Sidebar is docked (closed).
    */
    .page__header-2 {
        background-color: limegreen;
        height: auto;
        display: flex;
        align-content: center;
        padding: .5em 12px;
    }

    /*
        Set styling for the main element
    */
    main {
        /*flex: 1;*/
        background-color: rgb(240,230,212);
        color: rgb(0, 141, 119);
        overflow-y: auto;
    }

    /*
        Set styling for the footer element
    */
    .page__footer {
        background-color: rgb(154,126,17);
        height: 3em;
        border-top: 3px solid rgb(203,105,0);
    
    /*
        Set styling for the Header2 Sidebar toggle button
    */
    .header2__sidebar-button {
        align-items:flex-start;
    }

    /*
        Set styling for the Header2 menu
    */
    .header2__menu {
        align-items:flex-start;
    }



    .top-row {
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        /*justify-content: flex-end;*/
        height: 3.5rem;
        /*display: flex;*/
        /*align-items: center;*/
    }

    /*.top-row ::deep a, .top-row .btn-link {
        white-space: nowrap;
        margin-left: 1.5rem;
    }*/

    /*.top-row a:first-child {
        overflow: hidden;
        text-overflow: ellipsis;
    }*/


    /*
        Adjustment for smaller screen sizes
    */
    @@media (max-width: 640.98px) 
    {
        .top-row:not(.auth) {
            display: none;
        }

        .top-row.auth {
            /*justify-content: space-between;*/
        }

        .top-row a, .top-row .btn-link {
            margin-left: 0;
        }
    }


    /*
        Adjustments for larger screen sizes
    */
    @@media (min-width: 641px) 
    {
        .page {
            /*flex-direction: row;*/
        }

        /*.sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }*/

        .page__header {
            /*position: sticky;*/
            /*top: 0;*/
            /*z-index: 1;*/
        }

        .page__footer {
            /*position: sticky;*/
            /*bottom: 0;*/
            /*z-index: 1;*/
        }

        .page__header,
        .page__main,
        .page_footer {
            /*padding-left: 2rem !important;*/
            /*padding-right: 1.5rem !important;*/
        }
    }

</style>