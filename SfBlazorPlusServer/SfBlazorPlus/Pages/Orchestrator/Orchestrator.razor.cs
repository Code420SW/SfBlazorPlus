using Code420.SfBlazorPlus.Code.Enums;
using Code420.SfBlazorPlus.Code.Models.Menus;
using Code420.SfBlazorPlus.Code.Models.Orchestrator;
using Code420.SfBlazorPlus.Code.Models.Theme;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorHorizontalMenu;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorSidebar;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorSidebarButton;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabManager.OrchestratorTabs.DummyTab;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabManager.OrchestratorTabs.DynamicComponentTab;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabMananger;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabMananger.OrchestratorTabs.CounterStateMachineTab;
using Code420.SfBlazorPlus.OrchestratorComponents.OrchestratorTabMananger.OrchestratorTabs.CounterTab;
using Code420.SfBlazorPlus.Shared;
using Microsoft.AspNetCore.Components;
using Syncfusion.Blazor.Navigations;
using System.Diagnostics;

namespace Code420.SfBlazorPlus.Pages.Orchestrator
{
    /// <summary>
    /// Responsible for containerizing all UI elements (e.g., OrchestratorSidebar and OrchestratorTabManager)
    /// and the data structures used by these components.
    /// Handles all events generated by the components and passes the events to related components.
    /// 
    /// NOTES: 
    ///     1.  Since the components used in the Tab Items are defined in BuildOrchestratorTabs(), 
    ///         make sure the using statements are correct.
    ///     2.  The linake between a Menu Item and the Tab Item loaded is through the Menu Item's
    ///         ItemId field and the Tab Item's CssClass field. These two must match for things to work.
    /// </summary>
    public partial class Orchestrator : ComponentBase
    {

        #region Component Parameters

        #region Base Parameters

        // ==================================================
        // Base Parameters
        // ==================================================


        #endregion


        #region Event Callback Parameters

        // ==================================================
        // Event Callback Parameters
        // ==================================================


        #endregion


        #region CSS Parameters

        // ==================================================
        // CSS Styling Parameters
        // ==================================================


        #endregion

        #endregion



        #region Callback Events Invoked from Underlying Components

        // ==================================================
        // Methods used as Callback Events from the underlying component(s)
        // ==================================================


        #endregion



        #region Instance Variables

        // ==================================================
        // Instance variables
        // ==================================================

        private OrchestratorSidebar sidebar;                        // Reference to the Sidebar component
        private OrchestratorSidebarButton buttonSidebarToggle;      // Reference to the Sidebar toggle button
        private OrchestratorTabManager tabmanager;                  // Reference to the Tab Manager component
        private OrchestratorHorizontalMenu horizontalMenu;          // Reference to the Horizontal Menu component

        private bool initialSidebarIsOpen = true;                   // The initial state of the Sidebar IsOpen parameter

        private List<OrchestratorMenuItem> sidebarMenuItems;        // Contains Sidebar Menu Items
        private List<OrchestratorMenuItem> mainMenuItems;           // Contains Main Menu Items
        private List<OrchestratorMenuItem> favoritesMenuItems;      // Contains Favorites Menu Items
        private List<OrchestratorTabDefinition> orchestratorTabs;   // Contains Tab Items

        #endregion



        #region Public Properties

        public List<OrchestratorMenuItem> SidebarMenuItems { get => this.sidebarMenuItems; }
        public List<OrchestratorMenuItem> MainMenuItems { get => this.mainMenuItems; }
        public List<OrchestratorMenuItem> FavoritesMenuItems { get => this.favoritesMenuItems; }
        public List<OrchestratorTabDefinition> OrchestratorTabs { get => this.orchestratorTabs; }

        #endregion



        #region Injected Dependencies

        // Injected Dependencies

        IThemeManager themeManager;


        // Dependency Injection

         [Inject]
        IThemeManager _themeManager { get => themeManager; set => themeManager = value; }

        #endregion



        #region Constructors


        // ==================================================
        // Constructors
        // ==================================================

        // This method is executed whenever the parent renders.
        // Parameters that were passed into the component are contained in a ParameterView.
        //  This is a good point at which to make asynchronous calls to a server (for example)
        //  based on the state passed into the component.
        // The component’s [Parameter] properties are assigned their values when you call
        //  base.SetParametersAsync(parameters) inside your override.
        // It is also the correct place to assign default parameter values.
        public override async Task SetParametersAsync(ParameterView parameters)
        {
            await base.SetParametersAsync(parameters);
        }

        // Once the state from the ParameterCollection has been assigned to the component’s
        //  [Parameter] properties, these methods are executed. This is useful in the same way
        //  as SetParametersAsync, except it is possible to use the component’s state.
        // This method is only executed once when the component is first created.If the parent
        //  changes the component’s parameters at a later time, this method is skipped.
        // When the component is a @page, and our Blazor app navigates to a new URL that renders
        //  the same page, Blazor will reuse the current object instance for that page.Because the
        //  object is the same instance, Blazor does not call IDisposable.Dispose on the object,
        //  nor does it execute its OnInitialized method again.
        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();

            BuildSidebarMenu();
            BuildMainMenu();
            BuildFavoritesMenu();
            BuildOrchestratorTabs();

            //themeManager.SetThemeType(ThemeType.Light);
        }

        // This method will be executed immediately after OnInitializedAsync if this is a new
        //  instance of a component. If it is an existing component that is being re-rendered because
        //  its parent is re-rendering then the OnInitialized* methods will not be executed, and this
        //  method will be executed immediately after SetParametersAsync instead
        protected override async Task OnParametersSetAsync()
        {
            await base.OnParametersSetAsync();
        }

        // This is the first place that the State should be changed
        //
        // This method is executed every time Blazor has re-generated the component’s RenderTree.
        //  This can be as a result of the component’s parent re-rendering, the user interacting with the component
        //  (e.g. a mouse-click), or if the component executes its StateHasChanged method to invoke a re-render.
        // This method has a single parameter named firstRender. This parameter is true only the first time the
        //  method is called on the current component, from there onwards it will always be false. In cases where
        //  additional component hook-up is required (for example, via JavaScript) it is useful to know this is the
        //  first render.
        // It is not until after the OnAfterRender method have executed that it is safe to use any references to
        //  components set via the @ref directive. And it is not until after the OnAfterRender method have been
        //  executed with firstRender set to true that it is safe to use any references to HTML elements set via
        //  the @ref directive
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
        }

        #endregion



        #region Public Methods Providing Access to the Underlying Components to the Consumer

        // ==================================================
        // Public Methods providing access to the underlying component to the consumer
        // ==================================================

        /// <summary>
        /// Responds to a menu item selected event by loading/activating the tab associated with the passed id.
        /// </summary>
        /// <param name="itemId">String value containing the id of the tab to load/activate.</param>
        public async Task MenuItemSelectedAsync(string itemId)
        {
            // Get the index of the itemId record in the OrchestratorTabs list
            int orchestratorTabIndex = FindOrchestratorTabIndex(itemId);
            if (orchestratorTabIndex == -1) return;

            // Determine if the Tab Item associated with the itemId is already one of the Items()
            // If so, activate the tab
            if (orchestratorTabs[orchestratorTabIndex].TabIndex != -1)
            {
                await tabmanager.SelectAsync(orchestratorTabs[orchestratorTabIndex].TabIndex);
                return;
            }

            // Find the highest index in the Tab Managers Item()
            int lastTabItemsIndex = tabmanager.GetLastTabItemsIndex() + 1;

            // Have the Tab Manager add the Tab Item
            // Activate the new tab.
            await tabmanager.AddTabAsync(new List<TabItem> { orchestratorTabs[orchestratorTabIndex].TabDefinition },
                                         lastTabItemsIndex,
                                         orchestratorTabIndex);
            await tabmanager.SelectAsync(lastTabItemsIndex);

            // Need to tell Blazor something changed.
            // Omit this and the new tab will not be active.
            await InvokeAsync(StateHasChanged);

            //Debug.WriteLine($"index = { orchestratorTabIndex }, TabIndex = {OrchestratorTabs[orchestratorTabIndex].TabIndex}, IsLoaded = {OrchestratorTabs[orchestratorTabIndex].IsLoaded}");

        }

        /// <summary>
        /// Toggles the open/close state of the Sidebar
        /// </summary>
        public async Task ToggleSidebarAsync() => await sidebar.ToggleSidebarAsync();

        /// <summary>
        /// Retrieves the current value of the Sidebar IsOpen parameter.
        /// </summary>
        /// <returns>Boolean value indicating if the Sidebar is open.</returns>
        public bool IsSidebarOpen() => (sidebar is not null) ? sidebar.GetSidebarState() : initialSidebarIsOpen;

        /// <summary>
        /// Finds the index of the menuItemId record in the OrchestratorTabs list.
        /// </summary>
        /// <param name="menuItemId">The id of the menu item to be found.</param>
        /// <returns>The index of the record, or -1 if not found.</returns>
        public int FindOrchestratorTabIndex(string menuItemId) =>
            orchestratorTabs.FindIndex(x => x.MenuItemId == menuItemId);

        /// <summary>
        /// Switches the current theme and causes the Orchestrator Manager to re-render.
        /// </summary>
        /// <param name="themeType">One of the <see cref="ThemeType"/> enums.</param>
        /// <returns></returns>
        public async Task ChangeThemeAsync(ThemeType themeType)
        {
            //Debug.WriteLine("ChangeThemeType hit");
            themeManager.SetThemeType(themeType);
            await InvokeAsync(StateHasChanged);
        }

        #endregion



        #region Private Methods for Internal Use Only


        private void BuildOrchestratorTabs()
        {
            orchestratorTabs = new()
            {
                new()
                {
                    MenuItemId = "4000",
                    IsLoaded = false,
                    TabIndex = -1,
                    TabDefinition = new()
                    {
                        CssClass = "4000",
                        ContentTemplate = RenderComponent(typeof(DummyTab)),
                        Disabled = false,
                        Header = new()
                        {
                            IconCss = "",
                            IconPosition = "",
                            Text = "Dummy Tab"
                        },
                        Visible = true
                    }
                },

                new()
                {
                    MenuItemId = "1001",
                    IsLoaded = false,
                    TabIndex = -1,
                    TabDefinition = new()
                    {
                        CssClass = "1001",
                        ContentTemplate = RenderComponent(typeof(CounterTab)),
                        Disabled = false,
                        Header = new()
                        {
                            IconCss = "",
                            IconPosition = "",
                            Text = "Counter"
                        },
                        Visible = true
                    }
                },

                new()
                {
                    MenuItemId = "1002",
                    IsLoaded = false,
                    TabIndex = -1,
                    TabDefinition = new()
                    {
                        CssClass = "1002",
                        ContentTemplate = RenderComponent(typeof(CounterStateMachineTab)),
                        Disabled = false,
                        Header = new()
                        {
                            IconCss = "",
                            IconPosition = "",
                            Text = "Counter State Machine"
                        },
                        Visible = true
                    }
                },

                new()
                {
                    MenuItemId = "2000",
                    IsLoaded = false,
                    TabIndex = -1,
                    TabDefinition = new()
                    {
                        CssClass = "2000",
                        ContentTemplate = RenderComponent(typeof(DynamicComponentTab)),
                        Disabled = false,
                        Header = new()
                        {
                            IconCss = "",
                            IconPosition = "",
                            Text = "Dynamic Component"
                        },
                        Visible = true
                    }
                }

            };
        }

        private void BuildSidebarMenu()
        {
            sidebarMenuItems = new List<OrchestratorMenuItem>()
            {
                new OrchestratorMenuItem
                {
                    MenuText = "Counter Tests",
                    IsDisabled = false,
                    IsHidden = false,
                    IconCss = "oi oi-aperture",
                    ItemId = "1000",
                    ParentId = null,
                    SubMenu = new List<OrchestratorMenuItem>
                    {
                        new OrchestratorMenuItem()
                        {
                            MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                            MenuText = "Counter",
                            ItemId = "1001",
                            ParentId = "1000"
                        },
                        new OrchestratorMenuItem()
                        {
                            MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                            MenuText = "Counter State Machine",
                            ItemId = "1002",
                            ParentId = "1000"
                        }
                    }
                },

                new OrchestratorMenuItem
                {
                    MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                    MenuText = "Dynamic Component",
                    IsDisabled = false,
                    IsHidden = false,
                    IconCss = "oi oi-book",
                    ItemId = "2000",
                    ParentId = null,
                },

                new OrchestratorMenuItem
                {
                    MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                    MenuText = "Dummy Tab",
                    IsDisabled = false ,
                    IsHidden = false,
                    IconCss = "oi oi-bug",
                    ItemId = "4000",
                    ParentId = null
                }
            };
        }

        private void BuildMainMenu()
        {
            mainMenuItems = new List<OrchestratorMenuItem>()
                {
                new OrchestratorMenuItem
                {
                    MenuText = "Counter Tests",
                    IsDisabled = false,
                    IsHidden = false,
                    ItemId = "1000",
                    ParentId = null,
                    SubMenu = new List<OrchestratorMenuItem>
                    {
                        new OrchestratorMenuItem()
                        {
                            MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                            MenuText = "Counter",
                            ItemId = "1001",
                            ParentId = "1000"
                        },
                        new OrchestratorMenuItem()
                        {
                            MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                            MenuText = "Counter State Machine",
                            ItemId = "1002",
                            ParentId = "1000"
                        }
                    }
                },

                new OrchestratorMenuItem
                {
                    MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                    MenuText = "Dynamic Component",
                    IsDisabled = false,
                    IsHidden = false,
                    ItemId = "2000",
                    ParentId = null,
                },

                new OrchestratorMenuItem
                {
                    MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                    MenuText = "Dummy Tab",
                    IsDisabled = false ,
                    IsHidden = false,
                    ItemId = "4000",
                    ParentId = null
                },

                new OrchestratorMenuItem
                {
                    MenuText = "Settings",
                    IsDisabled = false,
                    IsHidden = false,
                    ItemId = "5000",
                    ParentId = null,
                    SubMenu = new List<OrchestratorMenuItem>
                    {
                        new OrchestratorMenuItem()
                        {
                            MenuText = "Switch Theme",
                            ItemId = "5100",
                            ParentId = "5000",
                            SubMenu = new List<OrchestratorMenuItem>
                            {
                                new OrchestratorMenuItem()
                                {
                                    MenuItemCallback = (async (s) => await ChangeThemeAsync(ThemeType.Light)),
                                    MenuText = "Light",
                                    ItemId = "5110",
                                    ParentId = "5100"
                                },
                                new OrchestratorMenuItem()
                                {
                                    MenuItemCallback = (async (s) => await ChangeThemeAsync(ThemeType.Dark)),
                                    MenuText = "Dark",
                                    ItemId = "5120",
                                    ParentId = "5100"
                                }
                            }
                        },
                        new OrchestratorMenuItem()
                        {
                            MenuItemCallback = (async (s) => await MenuItemSelectedAsync((string) s)),
                            MenuText = "Do Nothing",
                            ItemId = "5200",
                            ParentId = "5000"
                        }
                    }
                },
            };
        }

        private void BuildFavoritesMenu()
        {
            favoritesMenuItems = new List<OrchestratorMenuItem>();
        }

        private RenderFragment RenderComponent(Type componentType) =>
            builder =>
            {
                builder.OpenComponent(0, componentType);
                builder.CloseComponent();
            };

        #endregion

    }
}
