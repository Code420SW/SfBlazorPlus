@page "/counterstatemachine"

@namespace Code420.SfBlazorPlus.Pages.Counter

@using Code420.SfBlazorPlus.BaseComponents.LabelBase
@using Code420.SfBlazorPlus.BaseComponents.ButtonBase
@using Code420.SfBlazorPlus.Code.Enums
@using Code420.SfBlazorPlus.CustomComponents.PageStateMachine.PageStateManager

@inject PageStateStore _pageStateStore

<PageTitle>Counter State Machine</PageTitle>

<!--
    Demonstrate use of the Page State Machine

    This implementation has a limitation:
    Control of the PageState must remain within the PageStateManager component as shown.
    This can be overcome by using a Cascading Parameter to allow child component to update the
        PageState but all child components would have to accept the Cascading Parameter.

    Another approach is to use the Dynamic Component. This would simplify things dramatically
        by eliminating the need for the PageStateContainer. 
    The limitation is the need to define the Dynamic Component's Parameters dictionary for every
        child component.
-->

<PageStateManager   @ref=@pageStateManager>
    <Loading>
        Loading State...
        <ButtonBase @ref=buttonLoadingState
                    IsPrimary=true
                    OnClick=@(() => _pageStateStore.UpdatePageState(PageState.Operating))
                    CssClass="button__loading"
                    Margin="0px 0px 0px 10px"
                    Padding="4px 8px"
                    >
            <ContentFragment>Move to Operating State</ContentFragment>
        </ButtonBase>
    </Loading>

    <Operating>
        <Counter></Counter>
        <ButtonBase @ref=buttonOperatingState
                    IsPrimary=true
                    OnClick=@(() => _pageStateStore.UpdatePageState(PageState.Error))
                    CssClass="button__operating"
                    Margin="6px 0px 0px 0px 0px"
                    Padding="4px 8px"
                    >
            <ContentFragment>Generate Error</ContentFragment>
        </ButtonBase>
    </Operating>

    <Error>
        Error State...
        <ButtonBase @ref=buttonErrorState
                    IsPrimary=true
                    OnClick=@(() => _pageStateStore.UpdatePageState(PageState.Loading))
                    CssClass="button__error"
                    Margin="0px 0px 0px 10px"
                    Padding="4px 8px"
                    >
            <ContentFragment>Move to Loading State</ContentFragment>
        </ButtonBase>
    </Error>

</PageStateManager>


@code 
{
    private PageStateManager pageStateManager;
    private ButtonBase buttonLoadingState;
    private ButtonBase buttonOperatingState;
    private ButtonBase buttonErrorState;


    private void OnLoadingButtonClick() =>  pageStateManager.SetPageState(PageState.Operating);

}
