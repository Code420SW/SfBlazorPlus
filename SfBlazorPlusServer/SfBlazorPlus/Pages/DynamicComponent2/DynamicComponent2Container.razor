@using Code420.SfBlazorPlus.BaseComponents.LabelBase
@using Code420.SfBlazorPlus.BaseComponents.ButtonBase
@using Code420.SfBlazorPlus.BaseComponents.SimpleCardBase
@using Code420.SfBlazorPlus.Code.Enums
@using Code420.SfBlazorPlus.CustomComponents.StepProgressIndicator
@using Code420.SfBlazorPlus.Pages.DynamicComponent2
@using System.Diagnostics

<!--
    This is a composite component that allows the user to move through a progression of 
    related data collection step. The user can move forward and backwards through the
    progression.

    The SimpleCardBase component encapsulates the static and dynamic child components.

    The header section of the card renders the StepProgressIndicator component which
    displays a series of dots. Each dot represents a step in the progression with the
    dot representing the current (active) progression step rendered in a different color
    that the rest of the (inactive) dots. As the use moves forward/backwards through the
    progression, the callbacl methods invoked by the child components (details below)
    invoke the StepProgressIndicator's SetActiveIndicator() method.

    The body section of the card does nothing but render a Dynamic Component. The code-behind
    builds a list of ChildComponent containing the series of child components in the
    data collection progression. The list is build in the OnInitializedAsync() constructor.

    Each ChildComponent contains the identifier for a child component and a dictionary of
    parameters passed to the child. For this demonstration each child accepts the same set
    of parameters: StepForward, StepBack and DataSource. 

    The StepForward and StepBack parameters are callbacks to the OnStepForwardClick() and
    OnStepBackClick() methods in the code-behind.

    The DataSource parameter passes a class instatiated in the code-behind to the child
    components. The data elements collected in the child components are stored in the class.

    The footer section of the card contains a LabelBase component with nothing significant.
-->

<SimpleCardBase @ref=@cardContainer

                CardBorderRadius="4px"
                CardBorder="2px solid #ccc"
                CardMargin="50px auto"
                CardPadding="0px"
                CardHeight="auto"
                CardWidth="400px"
                CardFontSize="14px"

                HeaderBackground="whitesmoke"
                HeaderMinimumHeight="auto"
                HeaderPadding="5px"

                HeaderSeparatorBottomBorder="1px solid var(--mydarkgreen)"

                ContentBackground="var(--mybeige)"
                ContentPadding="20px 10px 10px 10px"
                ContentMinimumHeight="170px"

                FooterBackground="whitesmoke"

                FooterSeparatorTopBorder="1px solid var(--mydarkgreen)"

                CssClass="card__dynamic-component"
                >

    <HeaderContent>
        <StepProgressIndicator  @ref=@stepIndicator
                                CssClass="container__indicators"
                                IndicatorCount=3
                                ActiveIndicator=1
                                IndicatorHeight="1em"
                                ContainerHeight="auto"
                                ContainerBottomBorder="none"
                                ActiveIndicatorBackground="var(--mydarkgreen)"
                                InactiveIndicatorBackground="var(--mydarkbrown)"
                                >
        </StepProgressIndicator>
    </HeaderContent>

    <BodyContent>
        <DynamicComponent   Type=@(Type.GetType(childComponents[indexCurrentChild].CType))
                            Parameters=@childComponents[indexCurrentChild].Params
                            >
        </DynamicComponent>
    </BodyContent>

    <FooterContent>
        <LabelBase  @ref=@labelFooter
                    LabelText="This is a SimpleCardBase providing Header, Body and Footer content. All are optional.
                                This page demonstrates using the StepProgressIndicator component in the Header and 
                                using a series of Dynamic Components in the Body."
                    CssClass="label__footer"
                    FontSize=".8em"
                    FontColor="var(--mydarkgreen)"
                    LabelPadding=".75em"
                    >
        </LabelBase>
    </FooterContent>

</SimpleCardBase>



@code 
{
    //
    // This parameter need to callback to the parent SPA deploying the
    // PageStateManager so, as needed, this component can signal changes in
    // the Page State Machine.
    //
    [Parameter]
    public Action<PageState> ChangePageState { get; set; }


    //
    // These two parameters contain the PageState indicating the next/previous
    // Page State Machine states and are passed by the parent SPA. Based on the
    // logic in this component, these parameters can be sent back to the parent
    // SPA to invoke changes in the Page State Machine. There aren't many use
    // cases for the PreviousPageState but is included for completness.
    [Parameter]
    public PageState PreviousPageState { get; set; }

    [Parameter]
    public PageState NextPageState { get; set; }


    //
    // Instance variables
    //
    private SimpleCardBase cardContainer;
    private StepProgressIndicator stepIndicator;
    private LabelBase labelFooter;

    private List<ChildComponent> childComponents;
    private int indexCurrentChild;


    //
    // Definitions for the array of dynamic components used
    //


    //
    // Constructor
    //

    // Once the state from the ParameterCollection has been assigned to the component’s
    //  [Parameter] properties, this method is executed. This is useful in the same way
    //  as SetParametersAsync, except it is possible to use the component’s state.
    // This method is only executed once when the component is first created. If the parent
    //  changes the component’s parameters at a later time, this method is skipped.
    // When the component is a @page, and our Blazor app navigates to a new URL that renders
    //  the same page, Blazor will reuse the current object instance for that page. Because the
    //  object is the same instance, Blazor does not call IDisposable.Dispose on the object,
    //  nor does it execute its OnInitialized method again.
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Initialize the childComponents list
        childComponents = new()
            {
                new()
                {
                    CType=typeof(DynamicComponent2Child1).AssemblyQualifiedName,
                    Params = new Dictionary<string, object>() 
                    { 
                        { "StepForward", OnStepForwardClick }                       // Previous button changes Page State Machine to Loading
                    }
                },
                new()
                {
                    CType=typeof(DynamicComponent2Child2).AssemblyQualifiedName,
                    Params = new Dictionary<string, object>() 
                    { 
                        { "StepForward", OnStepForwardClick },                      // Next button moves to Child #3
                        { "StepBack", OnStepBackClick }                             // Previous button moves to Child #1
                    }
                },
                new()
                {
                    CType=typeof(DynamicComponent2Child3).AssemblyQualifiedName,
                    Params = new Dictionary<string, object>() 
                    { 
                        { "StepBack", OnStepBackClick }                             // Previous button moves to Child #2
                    }
                }
            };

        // Initialize the current child index
        indexCurrentChild = 0;
    }

    //
    // These callbacks are provided to child components to allow them
    // to signal the need for a change in the state of the Page State Machine
    //
    public void OnPreviousButtonClick()
    {
        if (ChangePageState is not null)
        {
            ChangePageState(PreviousPageState);
        }
    }

    public void OnNextButtonClick()
    {
        if (ChangePageState is not null)
        {
            ChangePageState(NextPageState);
        }
    }


    //
    // These callbacks are provided to child components to allow them
    // to signal the need to step forward/back through the progression.
    // These will cause a change in the <DynamicComponent> that is rendered
    //
    public void OnStepForwardClick()
    {
        indexCurrentChild++;
        stepIndicator.SetActiveIndicator(indexCurrentChild+1);
        InvokeAsync(StateHasChanged);
    }

    public void OnStepBackClick()
    {
        indexCurrentChild--;
        stepIndicator.SetActiveIndicator(indexCurrentChild+1);
        InvokeAsync(StateHasChanged);
    }



    //
    // This class encapsulates the info for the child components passed to <DynamicComponent>
    //
    public class ChildComponent
    {
        public string CType { get; set; }
        public Dictionary<string, object> Params { get; set; }

    }

}
